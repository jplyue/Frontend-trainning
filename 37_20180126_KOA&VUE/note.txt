代理

替你去请求某个资源

普通代理：
	VPN: 上网站去下东西再传给我，
	目的：跨域、翻墙
反向代理：
	不是你找他，是他找你

代理访问后端接口：
1. 为了安全：破坏了这一层还触及不到系统安全
2. 打包好的资源，放到手机之类的地方运行，涉及到跨域


session:
	cookie-session: 限制和cookie一致，共享不了cookie就实现不了session

	token


负载均衡：
	最终目标，服务器CPU利用率比较均衡，考虑如何把任务均匀分开

	火车票：平时松散，春节火爆——突发性；预订3天以后，2天后，还是现在就要————实时性；个人用户/企业用户————数据量

	问题：
	1. 大任务切成小块。有些任务不可分解
	2. 任务分解之后，如何实时获取服务器当前的负载。谁闲给谁派活

区块链：
	1. 分布式数据库
	1) 平时的数据库是集中存储的，比如银行都存在银行里。但是分布式数据库每个人都可见。你在转账后不可抵赖，因为所有人都可以作证
	2) token 可以用128位。。。破解难度约等于0。hash为基础的

测试服务器的稳定性：
	压力测试
	设计的容量：例如单台服务器，并发1000，
	高并发请求。在这种情况下代码的问题会暴露出来

node调用PHP、JAVA的接口
	1. PHP、JAVA编译成原生代码，再用node请求原生模块
	2. HTTP方式，交互

	http.createServer 扮演server

	http.request

后台如何反爬虫？
	无法识别爬虫
	1. 检测————行为检测、特征检测，检测这个ip的请求数量超过1000次后，出道验证码。
	2. 验证码，可以档掉95%的弱智爬虫
	任何来自客户端的数据都可以伪造

前台渲染怎么做seo
	没法做

==========================================================================================


koa-convert


convert(function *(){ }) 	--> 	Promise 对象

----------------------------------------------------

koa-ejs

render(app, {
  root: path.join(__dirname, 'view'),//模板的地址
  layout: 'template', // 不写也可以
  viewExt: 'html', // 模板的扩展名
  cache: false, //编译后模板是否缓存，开发false
  debug: true//生产环境false
});


------------------------------------------------------

前台渲染：

vue不是单页应用，只是应用场景大部分是单页的

1. vue基础
2. vue-router
3. component、通信、状态管理(vuex)
4. vue-cli 编译、打包、测试
5. 